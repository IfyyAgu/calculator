name: Auto(CI-CD)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  #specifies the repository to use which is github in this case. Image name is the name of the repo
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ifyagu/calculator-app

permissions:
  actions: read
  contents: read
  security-events: write


jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository/check out code  
      uses: actions/checkout@v4

    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
      with:
        cosign-release: 'v2.1.1'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      #event run on psu event and not pull
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.D_USERNAME }}
        password: ${{ secrets.D_PASSWORD }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Scan image
      uses: anchore/scan-action@v3
      with:
        image: ${{ steps.meta.outputs.tags }}
        fail-build: false
        severity-cutoff: critical 
       

    - name: Create SBOM
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        output-file: "${{ github.event.repository.name }}-sbom.spdx.json"

    - name: Scan SBOM
      uses: anchore/scan-action@v3
      id: scan
      with:
        sbom: "${{ github.event.repository.name }}-sbom.spdx.json"

    - name: upload Anchore scan SARIF report
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}

    - name: Inspect action SARIF report
      run: cat ${{ steps.scan.outputs.sarif }}
